version: '3.7'

services:

  db:
    container_name: pg-db-ticketera
    image: postgres:16-alpine
    restart: always
    networks:
      - ticketera-network
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_ticketera:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 2s
      retries: 20

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    ports:
      - "${PORT}:${PORT}"
    stdin_open: true
    tty: true
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ticketera-network
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}

  admin-frontend:
    container_name: ticketera-admin-frontend
    build:
      context: ../admin-ticketera
      dockerfile: admin.dockerfile
      args:
        - NEXT_PUBLIC_API_URL=https://api.partyckets.com.ar
    environment:
      - NEXT_PUBLIC_API_URL=https://api.partyckets.com.ar
    ports:
      - "3002:3000"
    env_file:
      - ../admin-ticketera/.env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ticketera-network

networks:
  ticketera-network:
    driver: bridge


volumes:
  postgres_data_ticketera:

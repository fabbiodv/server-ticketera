// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPERADMIN // Super administrador (admin)
  OWNER // Creador de la productora (líder)
  ORGANIZADOR // Administrador (publica) ignorar
  LIDER // Organizador
  SUBPUBLICA
  PUBLICA // Relaciones públicas
}

enum estadoTipoEntrada {
  DISPONIBLE
  AGOTADA
  LIMITADA
}

enum estadoProductora {
  activa
  inactiva
}

enum estadoPago {
  PENDING
  SUCCESS
  FAILURE
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  SUSPENDED
  BANNED
}

model User {
  id                Int       @id @default(autoincrement())
  name              String?
  email             String    @unique
  password          String?
  lastName          String?
  phone             String?
  dni               String?   @unique
  status            UserStatus @default(PENDING_VERIFICATION)
  // JWT y Magic Link tokens
  magicLinkToken    String?   @unique
  tokenExpiry       DateTime?
  lastLogin         DateTime?
  // MercadoPago tokens
  mpAccessToken     String?
  mpUserId          String?
  mpRefreshToken    String?
  mpTokenExpiresAt  DateTime?
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relaciones
  profiles          Profile[]
  Eventos           Eventos[]
  payments          Payment[]
  entradasCompradas Entrada[] @relation("BuyerRelation")
  entradasVendidas  Entrada[] @relation("SellerRelation")
  sessions          Session[]
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  isValid      Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
}

model Productora {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  code            String            @unique
  totalEvents     Int               @default(0)
  activeEvents    Int               @default(0)
  totalOrganizers Int               @default(0)
  totalRevenue    Float             @default(0)
  status          estadoProductora? @default(activa)
  // Agregar timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relaciones
  profiles        Profile[]
  eventos         Eventos[]
}

model Eventos {
  id           Int           @id @default(autoincrement())
  name         String
  date         DateTime
  startTime    DateTime
  endTime      DateTime
  description  String
  location     String
  capacity     Int
  productoraId Int
  // Agregar timestamps
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relaciones
  usuarios     User[]
  productora   Productora    @relation(fields: [productoraId], references: [id])
  tipoEntrada  TipoEntrada[]
  Entrada      Entrada[]     // Agregar relación faltante
}

model TipoEntrada {
  id                       Int               @id @default(autoincrement())
  nombre                   String
  precio                   Float
  eventoId                 Int
  totalEntradas            Int
  maximoEntradasPorPersona Int
  estado                   estadoTipoEntrada @default(DISPONIBLE)
  disponible               Boolean           @default(true)
  // Agregar timestamps
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  
  // Relaciones
  evento                   Eventos           @relation(fields: [eventoId], references: [id])
  Entrada                  Entrada[]         // Cambiar nombre para consistencia
}

model Entrada {
  id            Int      @id @default(autoincrement())
  eventoId      Int
  qrCode        String   @unique
  escaneado     Boolean  @default(false)
  tipoEntradaId Int
  buyerId       Int
  sellerId      Int
  // Agregar timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  evento        Eventos     @relation(fields: [eventoId], references: [id])
  tipoEntrada   TipoEntrada @relation(fields: [tipoEntradaId], references: [id])
  buyer         User        @relation("BuyerRelation", fields: [buyerId], references: [id])
  seller        User        @relation("SellerRelation", fields: [sellerId], references: [id])
  payment       Payment?
}

model Payment {
  id        Int        @id @default(autoincrement())
  userId    Int
  entradaId Int        @unique
  amount    Float
  status    estadoPago @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relaciones
  user      User       @relation(fields: [userId], references: [id])
  entrada   Entrada    @relation(fields: [entradaId], references: [id])
}

model TipoEntrada {
  id                       Int               @id @default(autoincrement())
  nombre                   String
  precio                   Float
  eventoId                 Int
  totalEntradas            Int
  maximoEntradasPorPersona Int
  estado                   estadoTipoEntrada @default(DISPONIBLE)
  disponible               Boolean           @default(true)
  evento                   Eventos           @relation(fields: [eventoId], references: [id])
  entradas                 Entrada[]
}

model Productora {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  code            String            @unique
  profiles        Profile[]
  totalEvents     Int               @default(0)
  activeEvents    Int               @default(0)
  totalOrganizers Int               @default(0)
  totalRevenue    Float             @default(0)
  status          estadoProductora? @default(activa)
  eventos         Eventos[]
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  status           UserStatus @default(PENDING_VERIFICATION)
  profiles          Profile[]
  Eventos           Eventos[]
  payments          Payment[]
  entradasCompradas Entrada[] @relation("BuyerRelation")
  entradasVendidas  Entrada[] @relation("SellerRelation")
}

model Profile {
  id           Int           @id @default(autoincrement())
  userId       Int
  productoraId Int
  qrCode       String?       @unique
  // Agregar timestamps
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relaciones
  user         User          @relation(fields: [userId], references: [id])
  productora   Productora    @relation(fields: [productoraId], references: [id])
  roles        RoleAsignee[]
}

model RoleAsignee {
  profileId Int
  role      Role
  // Agregar timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@id([profileId, role])
}
services:
  # Primero ejecutamos solo la base de datos para asegurar que se cree correctamente
  db:
    container_name: pg-db-ticketera
    image: postgres:16-alpine
    restart: always
    networks:
      - ticketera-network
    env_file:
      - .env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_ticketera:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 2s
      retries: 20

  # Luego la aplicaci√≥n que depende de la base de datos
  backend:
    container_name: backend-ticketera
    build:
      context: .
      dockerfile: Dockerfile
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3010/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ticketera-network
    ports:
      - "3010:3010"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
      - /app/node_modules

networks:
  ticketera-network:
    driver: bridge

volumes:
  postgres_data_ticketera:
